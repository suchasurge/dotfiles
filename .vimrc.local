" highlight current line
set cursorline

command! W w
command! Q q
command! Qa qa
command! Wa wa
command! Wq wq

if has("gui_running")
  colorscheme railscasts
  set guioptions-=r
elseif &t_Co > 2
  set t_Co=256
  " enable mouse support
  set mouse=a
  set number
  " customize statusline and display usefull infos
  set laststatus=2
  set statusline=%{rvm#statusline()}\ %<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
  " Powerline config
  set encoding=utf-8
  let g:Powerline_colorscheme = 'solarized256'
  " enable solarized colorcheme
  syntax enable
  set background=dark
  " enable following when solorized palette not used
  "let g:solarized_termcolors=256
  colorscheme solarized
endif

let mapleader = "," " Change From Backslash to Comma in commands \a -> ,a

" NERDTree (Press ,d)
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

" Gundo Vim (f5)
map <leader>gu :execute ':GundoToggle'<CR>

set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab

" disable folding
set nofoldenable

"tab-completion for buffers
set wildmenu

" highlight search
set hls

"remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" This is a dependency for vim-textobj-rubyblock
runtime macros/matchit.vim

" Some stuff for tabular
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

noremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" Keep Block visually marked when indenting
nmap > ><CR>gv
nmap < <<CR>gv
vmap > ><CR>gv
vmap < <<CR>gv


""""""""""""""""""""""""""""""""""""""""
"" Syntastic-specific config settings
""""""""""""""""""""""""""""""""""""""""

" use signs to indicate lines with errors
" only if signs are available
if has('signs')
  let g:syntastic_enable_signs = 1
endif

" automatically open the location list when a buffer has errors
let g:syntastic_auto_loc_list=1

" always show warnings
let g:syntastic_quiet_warnings=0

" No Check for HTML
let g:syntastic_disabled_filetypes = ['html']

" In vimdiff Mode do not auto-show the errors
if &diff
  let g:syntastic_auto_loc_list=2
endif

let g:private_snippets_dir = "~/.vim/snippets/"

"" Open files with <leader>f
map <leader>f :CommandT<cr>
" Open files, limited to the directory of the current file, with <leader>gf
" This requires the %% mapping found below.
map <leader>gf :CommandT %%<cr>
map <leader>gv :CommandT app/views<cr>
map <leader>gc :CommandT app/controllers<cr>
map <leader>gm :CommandT app/models<cr>
map <leader>gh :CommandT app/helpers<cr>
map <leader>gl :CommandT lib<cr>

" switch between the last two files
nnoremap <leader><leader> <c-^>

nnoremap <leader>gs :SyntasticToggleMode<cr>

" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" enable Filetype for iolanguage
au BufNewFile,BufRead *.io set filetype=io

nnoremap t <C-]>
map <leader>tn :tn<CR>
map <leader>tp :tp<CR>


" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" vim-go: disable fmt errors because syntastic already does the job
let g:go_fmt_autosave = 1
let g:go_fmt_fail_silently = 0

" Go related mappings
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gr <Plug>(go-run)
au FileType go nmap <Leader>gb <Plug>(go-build)
au FileType go nmap <Leader>gt <Plug>(go-test)
au FileType go nmap <Leader>gc <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

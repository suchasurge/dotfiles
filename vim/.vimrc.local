if has("gui_running")
  colorscheme railscasts
  :set cursorline
  :set guioptions-=r
else
  set t_Co=256
  colorscheme railscasts
endif

let mapleader = "," " Change From Backslash to Comma in commands \a -> ,a

" NERDTree (Press ,d)
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

set softtabstop=2
set shiftwidth=2
set tabstop=2
set expandtab

"tab-completion for buffers
set wildmenu

" highlight search
set hls

"remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Stuf for omnicppcomplete and supertab
filetype plugin on
set ofu=syntaxcomplete#Complete
set completeopt=longest,menuone
let g:SuperTabDefaultCompletionType = "<C-X><C-O>"
let g:SuperTabDefaultCompletionType = "context"
highlight Pmenu guibg=brown gui=bold

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" This is a dependency for vim-textobj-rubyblock
runtime macros/matchit.vim

" Some stuff for tabular
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

noremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

